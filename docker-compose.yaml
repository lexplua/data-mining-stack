services:


  mlflow:

    image: "mlflow-server"
    build: custom_images/mlflow

    ports:
      - "5000:${MLFLOW_PORT}"

    container_name: mlflow

    command: mlflow server --host ${MLFLOW_URI} --default-artifact-root s3://${S3_BUCKET_NAME}/  --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
    environment:
        - MLFLOW_S3_ENDPOINT_URL=http://${MINIO_HOSTNAME}:${MINIO_PORT}
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

    depends_on:
      - minio
      - db
    networks:
      - toolkit_network



  minio:
    image: "minio/minio:RELEASE.2023-07-21T21-12-44Z.fips"
    container_name: minio
    ports:
        - "9000:${MINIO_PORT}"
        - "9001:${MINIO_CLI_PORT}"
    command: server /data --console-address ':9001' --address ':9000'
    environment:
        - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
        - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    volumes:
        - ./minio_data:/data
    networks:
      - toolkit_network

  mc:
    image: minio/mc
    container_name: mc
    hostname: mc
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
      /usr/bin/mc mb minio/${S3_BUCKET_NAME};
      exit 0;
      "
    depends_on:
      - minio
    networks:
      - toolkit_network


  db:
    image: "postgres:bullseye"
    volumes:
       - ./postgres:/data/postgres
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      PGDATA: ${PGDATA:-/data/postgres}
    ports:
      - "5432:${POSTGRES_PORT}"

    networks:
      - toolkit_network

  spark-master:
    build: custom_images/spark
    container_name: spark-master
    ports:
      - "8080:8080"
    environment:
      - SPARK_MODE=master
    networks:
      - toolkit_network

  spark-worker:
    build: custom_images/spark
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1g
    ports:
      - "8081:8081"
    depends_on:
      - spark-master
    networks:
      - toolkit_network

  jupyter-notebook:
    build:
      context: custom_images/jupyter-notebook
      args:
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        MINIO_PORT: ${MINIO_PORT}
        MINIO_HOSTNAME: ${MINIO_HOSTNAME}
    container_name: jupyter-notebook
    ports:
      - "8888:8888"
    environment:
      - JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/
    volumes:
      - ./notebooks:/home/jovyan/work
    networks:
      - toolkit_network


networks:
  toolkit_network:
    driver: bridge
    name: toolkit_network
